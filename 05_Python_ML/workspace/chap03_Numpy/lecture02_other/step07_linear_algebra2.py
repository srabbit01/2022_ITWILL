# -*- coding: utf-8 -*-
"""
1. 행렬곱
2. 연립방식의 해 
"""

import numpy as np 

# 1. 행렬곱 : 행렬 vs 행렬 곱셈 연산
'''
  - 행렬의 선형변환(선형결합)  : 차원축소 
  - 회귀방정식 : X변수와 기울기 곱셈 
  - 딥러닝: 입력변수(X)와 가중치(w) 곱셈
  
  v1, v2 행렬 = 임의의 정방행렬
  - 행렬내적: v1.T @ v2 -> 상수(scala) 반환
  - 행렬외적: v1 @ v2.T -> 행렬(matrix) 반환
  * 전치행렬 취하는 이유: 수일치 위해
'''
  

# 1) 두 벡터 내적  
# 내적 : v1.T @ v2
v1 = np.array([1, 2, 3]).reshape(3,1)
v2 = np.array([2, 3, 4]).reshape(3,1)
v1
v2
v1.shape # (3, 1)
v2.shape # (3, 1)

# 행렬내적 : 함수 
# 전치행렬 = 수 일치를 위해 사용
dot_re = v1.T @ v2 # @: 행렬곱 기호
dot_re = v1.T.dot(v2) # np.dot(): 행렬곱 함수
print(dot_re)
# [[20]]
dot_re.shape # (1,1) = (1,3) @ (3,1)


# 2) 두 벡터 외적 
# 외적 : v1 @ v2.T
dot_re2 = v1 @ v2.T
dot_re2 = v1.dot(v2.T) 
print(dot_re2)
'''
[[ 2  3  4]
 [ 4  6  8]
 [ 6  9 12]]
'''

'''
행렬의 곱 연산 시, 주의사항
1. A, B 모두 -> 행렬 구조
2. A, B 간 수일치 (A[열수] = B[행수])
'''

# 2. 연립방정식 해(Solve a linear matrix equation): np.linalg.solve(a, b)
'''
연립방정식 : 2개 이상의 방정식을 묶어놓은 것
다음과 같은 연립방정식의 해(x, y) 구하기 
3*x + 2*y = 53
-4*x + 3*y = -35
'''

a = np.array([[3, 2], [-4, 3]]) # 2d
b = np.array([53, -35]) # 1d

x, y = np.linalg.solve(a, b)

print(x,y)
# 13.470588235294118 6.294117647058823

# test
x=13.470588235294118
y=6.294117647058823

(53-3*x)/2 # 6.2941176470588225








